/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library_management_system;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author PC
 */
public class LMS_user extends javax.swing.JFrame {
    
    private static Connection conn = null;

    private static final String URL = "jdbc:mysql://localhost:3306/libraryDB";
    private static final String USER = "root";
    private static final String PASSWORD = "";
    
    /**
     * Creates new form LMS_main
     */
    public LMS_user() {
        initComponents();
        jLabel2.setText("Welcome, " + SharedModel.getInstance().getSharedData() + "...");
        jLabel3.setText("Welcome, " + SharedModel.getInstance().getSharedData() + "...");
        connect();
        library_table.getTableHeader().setDefaultRenderer(new LMS_user.CustomHeaderRenderer());
        setColumnWidths();
        loadBooks();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        library_table = new javax.swing.JTable();
        refresh_table = new javax.swing.JButton();
        close = new javax.swing.JButton();
        return_book = new javax.swing.JButton();
        borrow_book = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        books_label = new javax.swing.JLabel();
        books_label_shadow = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(1080, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        library_table.setBackground(new java.awt.Color(102, 51, 0));
        library_table.setForeground(new java.awt.Color(255, 255, 255));
        library_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        library_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        library_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        library_table.setRowHeight(40);
        library_table.setSelectionBackground(new java.awt.Color(255, 127, 0));
        library_table.setSelectionForeground(new java.awt.Color(255, 255, 255));
        library_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(library_table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 640, 300));

        refresh_table.setBackground(new java.awt.Color(102, 51, 0));
        refresh_table.setForeground(new java.awt.Color(255, 255, 255));
        refresh_table.setText("Refresh");
        refresh_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refresh_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_tableActionPerformed(evt);
            }
        });
        getContentPane().add(refresh_table, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 510, 80, -1));

        close.setBackground(new java.awt.Color(0, 0, 0));
        close.setFont(new java.awt.Font("Segoe Script", 1, 12)); // NOI18N
        close.setForeground(new java.awt.Color(0, 0, 0));
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/close.png"))); // NOI18N
        close.setMaximumSize(new java.awt.Dimension(35, 35));
        close.setMinimumSize(new java.awt.Dimension(35, 35));
        close.setPreferredSize(new java.awt.Dimension(35, 35));
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 20, -1, -1));

        return_book.setBackground(new java.awt.Color(102, 51, 0));
        return_book.setForeground(new java.awt.Color(255, 255, 255));
        return_book.setText("Return");
        return_book.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        return_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_bookActionPerformed(evt);
            }
        });
        getContentPane().add(return_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 510, 80, -1));

        borrow_book.setBackground(new java.awt.Color(102, 51, 0));
        borrow_book.setForeground(new java.awt.Color(255, 255, 255));
        borrow_book.setText("Borrow");
        borrow_book.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        borrow_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrow_bookActionPerformed(evt);
            }
        });
        getContentPane().add(borrow_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 510, 80, -1));

        logout.setBackground(new java.awt.Color(102, 51, 0));
        logout.setForeground(new java.awt.Color(255, 255, 255));
        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        getContentPane().add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 620, 90, -1));

        books_label.setBackground(new java.awt.Color(255, 255, 255));
        books_label.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        books_label.setForeground(new java.awt.Color(255, 255, 255));
        books_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        books_label.setText("-----Books-----");
        books_label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(books_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 640, 50));

        books_label_shadow.setBackground(new java.awt.Color(0, 0, 0));
        books_label_shadow.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        books_label_shadow.setForeground(new java.awt.Color(0, 0, 0));
        books_label_shadow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        books_label_shadow.setText("-----Books-----");
        books_label_shadow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(books_label_shadow, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 650, 60));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 960, 50));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Welcome");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 970, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.png"))); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void refresh_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_tableActionPerformed
        loadBooks();
    }//GEN-LAST:event_refresh_tableActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // Show a confirmation dialog
        int response = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to quit?", 
            "Confirm Action", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
    
        // Check the user's response
        if (response == JOptionPane.YES_OPTION) {
            // User clicked Yes
            dispose();
            System.exit(0);
        } else {
            // User clicked No or closed the dialog
            return;
        }
    }//GEN-LAST:event_closeActionPerformed

    private void return_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_bookActionPerformed
        returnBook();
    }//GEN-LAST:event_return_bookActionPerformed

    private void borrow_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrow_bookActionPerformed
        borrowBook();
    }//GEN-LAST:event_borrow_bookActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        LMS_Login login = new LMS_Login();
        
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed
  
    private void connect() {
        try {
            conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Connection established successfully.");
            
            // Add a shutdown hook to close the connection when the program exits
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                try {
                    if (conn != null && !conn.isClosed()) {
                        conn.close();
                        System.out.println("Connection closed successfully!");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }));
        } catch (SQLException e) {
            System.out.println("Connection failed: " + e.getMessage());
            e.printStackTrace();
        } 
    }
    
    private void loadBooks() {
        if (conn != null) {
            try {
                String query = "SELECT * FROM books";
                PreparedStatement stmt = conn.prepareStatement(query);
                ResultSet rs = stmt.executeQuery();

                int row = 0; 
                while (rs.next()) {
                
                    if (row >= library_table.getRowCount()) {
                        ((DefaultTableModel)library_table.getModel()).addRow(new Object[]{"", "", "", ""});
                    }

                    // Set text for existing rows
                    library_table.setValueAt(rs.getInt("Book_ID"), row, 0);
                    library_table.setValueAt(rs.getString("Title"), row, 1);
                    library_table.setValueAt(rs.getString("Author"), row, 2);
                    library_table.setValueAt(rs.getBoolean("Available") ? "Yes" : "No", row, 3);
                
                    row++; 
                }

                rs.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error loading books!");
                e.printStackTrace();
            }
        }
    }
    
    private void borrowBook() {
        int selectedRow = library_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select a book to borrow!", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int bookId = (int) library_table.getValueAt(selectedRow, 0);
        String availability = (String) library_table.getValueAt(selectedRow, 3);

        // Check if the book is already borrowed
        if ("No".equalsIgnoreCase(availability)) {  // Use equalsIgnoreCase for robustness
            JOptionPane.showMessageDialog(this, "This book is already borrowed.", "Already Borrowed", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Check if the book is archived
        String checkArchivedQuery = "SELECT is_archived FROM books WHERE Book_ID = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkArchivedQuery)) {
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isArchived = rs.getBoolean("is_archived");
                if (isArchived) {
                    JOptionPane.showMessageDialog(this, "This book is archived and cannot be borrowed.", "Borrowing Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Book not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error checking book status: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Proceed to borrow the book
        String query = "UPDATE books SET Available = FALSE WHERE Book_ID = ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {  // Try-with-resources to auto-close the statement
            stmt.setInt(1, bookId);
            stmt.executeUpdate();
            library_table.setValueAt("No", selectedRow, 3); // Update availability in the table
            JOptionPane.showMessageDialog(this, "Book borrowed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error borrowing book: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void returnBook() {
        int selectedRow = library_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select a book to return!", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int bookId = (int) library_table.getValueAt(selectedRow, 0);
        String availability = (String) library_table.getValueAt(selectedRow, 3);

        // Check if the book is already available
        if ("Yes".equalsIgnoreCase(availability)) {  // Use equalsIgnoreCase for robustness
            JOptionPane.showMessageDialog(this, "This book is already returned.", "Already Returned", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Check if the book is archived
        String checkArchivedQuery = "SELECT is_archived FROM books WHERE Book_ID = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkArchivedQuery)) {
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isArchived = rs.getBoolean("is_archived");
                if (isArchived) {
                    JOptionPane.showMessageDialog(this, "This book is archived and cannot be returned.", "Return Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Book not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error checking book status: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Proceed to return the book
        String query = "UPDATE books SET Available = TRUE WHERE Book_ID = ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {  // Try-with-resources to auto-close the statement
            stmt.setInt(1, bookId);
            stmt.executeUpdate();
            library_table.setValueAt("Yes", selectedRow, 3); // Update availability in the table
            JOptionPane.showMessageDialog(this, "Book returned successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error returning book: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void setColumnWidths() {
        // Set the preferred width for each column
        library_table.getColumnModel().getColumn(0).setPreferredWidth(50); // Set width for the first column
        library_table.getColumnModel().getColumn(1).setPreferredWidth(300); // Set width for the second column
        library_table.getColumnModel().getColumn(2).setPreferredWidth(150); // Set width for the third column
        library_table.getColumnModel().getColumn(3).setPreferredWidth(100); // Set width for the third column
        // Add more columns as needed
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LMS_user.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LMS_user.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LMS_user.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LMS_user.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LMS_user().setVisible(true);
            }
        });
    }
    
    class CustomHeaderRenderer extends JLabel implements TableCellRenderer {
        private final Color headerBackgroundColor = hexToRgb("#663300");
        private final Color headerForegroundColor = hexToRgb("#FFFFFF");
        
        public CustomHeaderRenderer() {
            setFont(new Font("Arial", Font.BOLD, 12));
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.LEFT); // Align text to the left
            setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0)); // Add padding (top, left, bottom, right)
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value.toString());
            setBackground(headerBackgroundColor);
            setForeground(headerForegroundColor);
            return this;
        }
        
        @Override
        public Dimension getPreferredSize() {

            // Set a custom height for the header
            return new Dimension(super.getPreferredSize().width, 40); // Set height to 40 pixels
        }
    }
    
    public static Color hexToRgb(String colorStr) {
        return new Color(
            Integer.valueOf(colorStr.substring(1, 3), 16),
            Integer.valueOf(colorStr.substring(3, 5), 16),
            Integer.valueOf(colorStr.substring(5, 7), 16)
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel books_label;
    public javax.swing.JLabel books_label_shadow;
    private javax.swing.JButton borrow_book;
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable library_table;
    private javax.swing.JButton logout;
    private javax.swing.JButton refresh_table;
    private javax.swing.JButton return_book;
    // End of variables declaration//GEN-END:variables
}
