/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package library_management_system;

import java.sql.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author PC
 */
public class LMS_admin extends javax.swing.JFrame {
    
    private static Connection conn = null;

    private static final String URL = "jdbc:mysql://localhost:3306/libraryDB";
    private static final String USER = "root";
    private static final String PASSWORD = "";
    
    
    /**
     * Creates new form LMS_main
     */
    public LMS_admin() {
        initComponents();
        jLabel2.setText("Welcome, " + SharedModel.getInstance().getSharedData() + "...");
        jLabel3.setText("Welcome, " + SharedModel.getInstance().getSharedData() + "...");
        connect();
        library_table.getTableHeader().setDefaultRenderer(new CustomHeaderRenderer());
        setColumnWidths();
        loadBooks();
        addPlaceholderStyle(title);
        addPlaceholderStyle(author);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        library_table = new javax.swing.JTable();
        refresh_table = new javax.swing.JButton();
        close = new javax.swing.JButton();
        return_book = new javax.swing.JButton();
        showArchived = new javax.swing.JButton();
        borrow_book = new javax.swing.JButton();
        title = new javax.swing.JTextField();
        author = new javax.swing.JTextField();
        add_book = new javax.swing.JButton();
        archive_book = new javax.swing.JButton();
        restore_book = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        books_label = new javax.swing.JLabel();
        books_label_shadow = new javax.swing.JLabel();
        addBooks_label = new javax.swing.JLabel();
        addBooks_label_shadow = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setSize(new java.awt.Dimension(1080, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        library_table.setBackground(new java.awt.Color(102, 51, 0));
        library_table.setForeground(new java.awt.Color(255, 255, 255));
        library_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Title", "Author", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        library_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        library_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        library_table.setRowHeight(40);
        library_table.setSelectionBackground(new java.awt.Color(255, 127, 0));
        library_table.setSelectionForeground(new java.awt.Color(255, 255, 255));
        library_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        library_table.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tableRowSelected(evt);
            }
        });
        jScrollPane1.setViewportView(library_table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 640, 300));

        refresh_table.setBackground(new java.awt.Color(102, 51, 0));
        refresh_table.setForeground(new java.awt.Color(255, 255, 255));
        refresh_table.setText("Refresh");
        refresh_table.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        refresh_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_tableActionPerformed(evt);
            }
        });
        getContentPane().add(refresh_table, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 510, 150, -1));

        close.setBackground(new java.awt.Color(0, 0, 0));
        close.setFont(new java.awt.Font("Segoe Script", 1, 12)); // NOI18N
        close.setForeground(new java.awt.Color(0, 0, 0));
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/close.png"))); // NOI18N
        close.setMaximumSize(new java.awt.Dimension(35, 35));
        close.setMinimumSize(new java.awt.Dimension(35, 35));
        close.setPreferredSize(new java.awt.Dimension(35, 35));
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        getContentPane().add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 20, -1, -1));

        return_book.setBackground(new java.awt.Color(102, 51, 0));
        return_book.setForeground(new java.awt.Color(255, 255, 255));
        return_book.setText("Return");
        return_book.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        return_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                return_bookActionPerformed(evt);
            }
        });
        getContentPane().add(return_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 510, 80, -1));

        showArchived.setBackground(new java.awt.Color(102, 51, 0));
        showArchived.setForeground(new java.awt.Color(255, 255, 255));
        showArchived.setText("Load Archived Books");
        showArchived.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        showArchived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showArchivedActionPerformed(evt);
            }
        });
        getContentPane().add(showArchived, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 540, 150, -1));

        borrow_book.setBackground(new java.awt.Color(102, 51, 0));
        borrow_book.setForeground(new java.awt.Color(255, 255, 255));
        borrow_book.setText("Borrow");
        borrow_book.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        borrow_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrow_bookActionPerformed(evt);
            }
        });
        getContentPane().add(borrow_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 510, 80, -1));

        title.setBackground(new java.awt.Color(102, 51, 0));
        title.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        title.setText("Title");
        title.setToolTipText("Title");
        title.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                titleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                titleFocusLost(evt);
            }
        });
        title.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleActionPerformed(evt);
            }
        });
        title.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                titleKeyPressed(evt);
            }
        });
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 620, 260, -1));

        author.setBackground(new java.awt.Color(102, 51, 0));
        author.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        author.setText("Author");
        author.setToolTipText("Author");
        author.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                authorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                authorFocusLost(evt);
            }
        });
        author.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorActionPerformed(evt);
            }
        });
        author.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                authorKeyPressed(evt);
            }
        });
        getContentPane().add(author, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 620, 230, -1));

        add_book.setBackground(new java.awt.Color(102, 51, 0));
        add_book.setForeground(new java.awt.Color(255, 255, 255));
        add_book.setText("Add Book");
        add_book.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        add_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_bookActionPerformed(evt);
            }
        });
        getContentPane().add(add_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 620, 110, -1));

        archive_book.setBackground(new java.awt.Color(102, 51, 0));
        archive_book.setForeground(new java.awt.Color(255, 255, 255));
        archive_book.setText("Archive");
        archive_book.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        archive_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archive_bookActionPerformed(evt);
            }
        });
        getContentPane().add(archive_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 510, 110, -1));

        restore_book.setBackground(new java.awt.Color(102, 51, 0));
        restore_book.setForeground(new java.awt.Color(255, 255, 255));
        restore_book.setText("Restore");
        restore_book.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        restore_book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restore_bookActionPerformed(evt);
            }
        });
        getContentPane().add(restore_book, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 510, 110, -1));

        logout.setBackground(new java.awt.Color(102, 51, 0));
        logout.setForeground(new java.awt.Color(255, 255, 255));
        logout.setText("Logout");
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        getContentPane().add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 620, 90, -1));

        books_label.setBackground(new java.awt.Color(255, 255, 255));
        books_label.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        books_label.setForeground(new java.awt.Color(255, 255, 255));
        books_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        books_label.setText("-----Books-----");
        books_label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(books_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 640, 50));

        books_label_shadow.setBackground(new java.awt.Color(0, 0, 0));
        books_label_shadow.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        books_label_shadow.setForeground(new java.awt.Color(0, 0, 0));
        books_label_shadow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        books_label_shadow.setText("-----Books-----");
        books_label_shadow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(books_label_shadow, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 650, 60));

        addBooks_label.setBackground(new java.awt.Color(255, 255, 255));
        addBooks_label.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        addBooks_label.setForeground(new java.awt.Color(255, 255, 255));
        addBooks_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addBooks_label.setText("-----Add Books-----");
        addBooks_label.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(addBooks_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 570, 640, 50));

        addBooks_label_shadow.setBackground(new java.awt.Color(0, 0, 0));
        addBooks_label_shadow.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        addBooks_label_shadow.setForeground(new java.awt.Color(0, 0, 0));
        addBooks_label_shadow.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addBooks_label_shadow.setText("-----Add Books-----");
        addBooks_label_shadow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(addBooks_label_shadow, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 570, 650, 60));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 960, 50));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Welcome");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 50, 970, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bg.png"))); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void refresh_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_tableActionPerformed
        loadBooks();
    }//GEN-LAST:event_refresh_tableActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        // Show a confirmation dialog
        int response = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to quit?", 
            "Confirm Action", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.WARNING_MESSAGE);
    
        // Check the user's response
        if (response == JOptionPane.YES_OPTION) {
            // User clicked Yes
            dispose();
            System.exit(0);
        } else {
            // User clicked No or closed the dialog
            return;
        }
    }//GEN-LAST:event_closeActionPerformed

    private void return_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_return_bookActionPerformed
        returnBook();
    }//GEN-LAST:event_return_bookActionPerformed

    private void borrow_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrow_bookActionPerformed
        borrowBook();
    }//GEN-LAST:event_borrow_bookActionPerformed

    private void titleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleActionPerformed

    private void authorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorActionPerformed

    private void archive_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archive_bookActionPerformed
        archiveBook();
    }//GEN-LAST:event_archive_bookActionPerformed

    private void add_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_bookActionPerformed
        addBookToDatabase();
    }//GEN-LAST:event_add_bookActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        LMS_Login login = new LMS_Login();
        
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutActionPerformed

    private void showArchivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showArchivedActionPerformed
        showArchived();
    }//GEN-LAST:event_showArchivedActionPerformed

    private void titleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_titleFocusGained
        if (title.getText().equals("Title")) {
            title.setText(null);
            title.requestFocus();
            
            removePlaceholderStyle(title);
        }
    }//GEN-LAST:event_titleFocusGained

    private void authorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_authorFocusGained
        if (author.getText().equals("Author")) {
            author.setText(null);
            author.requestFocus();
            
            removePlaceholderStyle(author);
        }
    }//GEN-LAST:event_authorFocusGained

    private void titleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_titleFocusLost
        if (title.getText().length()==0) {
            addPlaceholderStyle(title);
            
            title.setText("Title");
        }
    }//GEN-LAST:event_titleFocusLost

    private void authorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_authorFocusLost
        if (author.getText().length()==0) {
            addPlaceholderStyle(author);
            
            author.setText("Author");
        }
    }//GEN-LAST:event_authorFocusLost

    private void titleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addBookToDatabase();
        }
    }//GEN-LAST:event_titleKeyPressed

    private void authorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addBookToDatabase();
        }
    }//GEN-LAST:event_authorKeyPressed

    private void restore_bookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restore_bookActionPerformed
        unarchiveBook();
    }//GEN-LAST:event_restore_bookActionPerformed
  
    private void connect() {
        try {
            conn = DriverManager.getConnection(URL, USER, PASSWORD);
            System.out.println("Connection established successfully.");
            
            // Add a shutdown hook to close the connection when the program exits
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                try {
                    if (conn != null && !conn.isClosed()) {
                        conn.close();
                        System.out.println("Connection closed successfully!");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }));
        } catch (SQLException e) {
            System.out.println("Connection failed: " + e.getMessage());
            e.printStackTrace();
        } 
    }
    
    private void loadBooks() {
        books_label.setText("-----Books-----");
        books_label_shadow.setText("-----Books-----");
        refresh_table.setText("Refresh");
        showArchived.setText("Load Archived Books");
        if (conn != null) {
            try {
                // Modify the query to exclude archived books
                String query = "SELECT * FROM books WHERE is_archived = FALSE";
                PreparedStatement stmt = conn.prepareStatement(query);
                ResultSet rs = stmt.executeQuery();

                // Clear the existing rows in the table before loading new data
                DefaultTableModel model = (DefaultTableModel) library_table.getModel();
                model.setRowCount(0); // Clear existing rows

                int row = 0; 
                while (rs.next()) {
                    // Add a new row for each book
                    model.addRow(new Object[]{"", "", "", ""});

                    // Set text for the new row
                    library_table.setValueAt(rs.getInt("Book_ID"), row, 0);
                    library_table.setValueAt(rs.getString("Title"), row, 1);
                    library_table.setValueAt(rs.getString("Author"), row, 2);
                    library_table.setValueAt(rs.getBoolean("Available") ? "Yes" : "No", row, 3);
                
                    row++; 
                }

                rs.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error loading books!");
                e.printStackTrace();
            }
        }
    }
    
    private void borrowBook() {
        int selectedRow = library_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select a book to borrow!", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int bookId = (int) library_table.getValueAt(selectedRow, 0);
        String availability = (String) library_table.getValueAt(selectedRow, 3);

        // Check if the book is already borrowed
        if ("No".equalsIgnoreCase(availability)) {  // Use equalsIgnoreCase for robustness
            JOptionPane.showMessageDialog(this, "This book is already borrowed.", "Already Borrowed", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Check if the book is archived
        String checkArchivedQuery = "SELECT is_archived FROM books WHERE Book_ID = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkArchivedQuery)) {
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isArchived = rs.getBoolean("is_archived");
                if (isArchived) {
                    JOptionPane.showMessageDialog(this, "This book is archived and cannot be borrowed.", "Borrowing Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Book not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error checking book status: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Proceed to borrow the book
        String query = "UPDATE books SET Available = FALSE WHERE Book_ID = ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {  // Try-with-resources to auto-close the statement
            stmt.setInt(1, bookId);
            stmt.executeUpdate();
            library_table.setValueAt("No", selectedRow, 3); // Update availability in the table
            JOptionPane.showMessageDialog(this, "Book borrowed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error borrowing book: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void returnBook() {
        int selectedRow = library_table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Select a book to return!", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int bookId = (int) library_table.getValueAt(selectedRow, 0);
        String availability = (String) library_table.getValueAt(selectedRow, 3);

        // Check if the book is already available
        if ("Yes".equalsIgnoreCase(availability)) {  // Use equalsIgnoreCase for robustness
            JOptionPane.showMessageDialog(this, "This book is already returned.", "Already Returned", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Check if the book is archived
        String checkArchivedQuery = "SELECT is_archived FROM books WHERE Book_ID = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkArchivedQuery)) {
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isArchived = rs.getBoolean("is_archived");
                if (isArchived) {
                    JOptionPane.showMessageDialog(this, "This book is archived and cannot be returned.", "Return Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Book not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error checking book status: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }

        // Proceed to return the book
        String query = "UPDATE books SET Available = TRUE WHERE Book_ID = ?";
        try (PreparedStatement stmt = conn.prepareStatement(query)) {  // Try-with-resources to auto-close the statement
            stmt.setInt(1, bookId);
            stmt.executeUpdate();
            library_table.setValueAt("Yes", selectedRow, 3); // Update availability in the table
            JOptionPane.showMessageDialog(this, "Book returned successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error returning book: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    
    private void showArchived() {
        books_label.setText("-----Archived Books-----");
        books_label_shadow.setText("-----Archived Books-----");
        refresh_table.setText("Load Books");
        showArchived.setText("Refresh");
        if (conn != null) {
            try {
                // Modify the query to include only archived books
                String query = "SELECT * FROM books WHERE is_archived = TRUE"; // Only load archived books
                PreparedStatement stmt = conn.prepareStatement(query);
                ResultSet rs = stmt.executeQuery();

                // Clear the existing rows in the table before loading new data
                DefaultTableModel model = (DefaultTableModel) library_table.getModel();
                model.setRowCount(0); // Clear existing rows

                int row = 0; 
                while (rs.next()) {
                    // Add a new row for each archived book
                    model.addRow(new Object[]{"", "", "", ""});

                    // Set text for the new row
                    library_table.setValueAt(rs.getInt("Book_ID"), row, 0);
                    library_table.setValueAt(rs.getString("Title"), row, 1);
                    library_table.setValueAt(rs.getString("Author"), row, 2);
                    library_table.setValueAt(rs.getBoolean("Available") ? "Yes" : "No", row, 3);

                    row++; 
                }

                rs.close();
                stmt.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error loading archived books!");
                e.printStackTrace();
            }
        }
    }
    
    private void addBookToDatabase() {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            String Title = title.getText().trim(); // Trim whitespace
            String Author = author.getText().trim(); // Trim whitespace

            // Validate Title and Author
            if (Title.isEmpty() || Title.equalsIgnoreCase("Title")) {
                JOptionPane.showMessageDialog(null, "Enter a valid Title of the book!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (Author.isEmpty() || Author.equalsIgnoreCase("Author")) {
                JOptionPane.showMessageDialog(null, "Enter a valid Author of the book!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Additional validation checks
            if (Title.length() < 3) { // Minimum length check for Title
                JOptionPane.showMessageDialog(null, "Title must be at least 3 characters long!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (Author.length() < 4) { // Minimum length check for Author (4 for single name)
                JOptionPane.showMessageDialog(null, "Author must be at least 4 characters long!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check for invalid characters
            if (!Title.matches("[\\w\\s.,':-]+")) {
                JOptionPane.showMessageDialog(null, "Title contains invalid characters!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!Author.matches("[\\w\\s.,'-]+")) {
                JOptionPane.showMessageDialog(null, "Author contains invalid characters!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check for repeated characters
            if (hasRepeatedCharacters(Title)) {
                JOptionPane.showMessageDialog(null, "Title contains repeated characters that are not valid words!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (hasRepeatedCharacters(Author)) {
                JOptionPane.showMessageDialog(null, "Author contains repeated characters that are not valid words!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check if the title and author feel like a book
            if (!isValidBookTitle(Title)) {
                JOptionPane.showMessageDialog(null, "The title does not seem like a valid book title!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!isValidAuthorName(Author)) {
                JOptionPane.showMessageDialog(null, "The author name does not seem valid!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check if every word in Title and Author starts with an uppercase letter, allowing certain lowercase words
            if (!isTitleAndAuthorCapitalized(Title)) {
                JOptionPane.showMessageDialog(null, "Each word in the title must start with an uppercase letter, except for allowed lowercase words!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!isTitleAndAuthorCapitalized(Author)) {
                JOptionPane.showMessageDialog(null, "Each word in the author's name must start with an uppercase letter, except for allowed lowercase words!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Check if the book already exists using COUNT for faster query
            String checkQuery = "SELECT COUNT(*) FROM books WHERE Title = ? AND Author = ?";
            stmt = conn.prepareStatement(checkQuery);
            stmt.setString(1, Title);
            stmt.setString(2, Author);
            rs = stmt.executeQuery();

            if (rs.next() && rs.getInt(1) > 0) { // If the count > 0, the book already exists
                JOptionPane.showMessageDialog(this, "This book already exists in the database!", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Insert new book if no duplicate found
            String insertQuery = "INSERT INTO books (Title, Author, Available, is_archived) VALUES (?, ?, TRUE, FALSE)";
            stmt = conn.prepareStatement(insertQuery);
            stmt.setString(1, Title);
            stmt.setString(2, Author);
            stmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Book added successfully!");

            // Reset fields and apply placeholder
            title.setText("Title");
            addPlaceholderStyle(title);

            author.setText("Author");
            addPlaceholderStyle(author);

            // Refresh JTable
            loadBooks();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error Adding Book: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    // Method to check if every word starts with an uppercase letter, allowing certain lowercase words
    private boolean isTitleAndAuthorCapitalized(String input) {
        // Define a set of lowercase words that are allowed
        Set<String> lowercaseWords = new HashSet<>();
        lowercaseWords.add("of");
        lowercaseWords.add("the");
        lowercaseWords.add("and");
        lowercaseWords.add("in");
        lowercaseWords.add("a");
        lowercaseWords.add("to");
        lowercaseWords.add("for");
        lowercaseWords.add("on");
        lowercaseWords.add("with");
        lowercaseWords.add("at");
        lowercaseWords.add("by");
        lowercaseWords.add("an");
        lowercaseWords.add("but");
        lowercaseWords.add("or");
        lowercaseWords.add("nor");
        lowercaseWords.add("so");
        lowercaseWords.add("yet");

        String[] words = input.split("\\s+");

        // Check the first word
        if (words.length > 0 && words[0].length() > 0) {
            char firstChar = words[0].charAt(0);
            // The first character must be uppercase or a digit
            if (!Character.isUpperCase(firstChar) && !Character.isDigit(firstChar)) {
                return false; // The first word must start with an uppercase letter or a digit
            }
        }

        // Check subsequent words
        for (int i = 1; i < words.length; i++) {
            String word = words[i];
            // Check if the word is not empty
            if (word.length() > 0) {
                char firstChar = word.charAt(0);
                // If the word is not in the set of lowercase words, it must start with an uppercase letter or a digit
                if (!lowercaseWords.contains(word.toLowerCase()) && !Character.isUpperCase(firstChar) && !Character.isDigit(firstChar)) {
                    return false; // If it doesn't start with an uppercase letter or a digit, return false
                }
            }
        }
        return true; // All words are valid
    }

    // Method to check for repeated characters
    private boolean hasRepeatedCharacters(String input) {
        String[] words = input.split("\\s+"); // Split input into words
        for (String word : words) {
            // Check for more than three consecutive repeated characters
            for (int i = 3; i < word.length(); i++) {
                if (word.charAt(i) == word.charAt(i - 1) && 
                    word.charAt(i - 1) == word.charAt(i - 2) && 
                    word.charAt(i - 2) == word.charAt(i - 3)) {
                    return true; // Found more than three consecutive repeated characters
                }
            }
        }
        return false; // No invalid repeated characters found
    }

    // Method to validate if the title feels like a book title
    private boolean isValidBookTitle(String title) {
        // Check for length
        return title.length() > 3; //This allows for single-word titles as well.
    }

    // Method to validate if the author name feels valid
    private boolean isValidAuthorName(String author) {
        // Split the author name into parts
        String[] nameParts = author.split(" ");

        // Check for either a single word or two words
        return (nameParts.length == 1 || nameParts.length == 2) && author.length() >= 4; // Ensure at least 4 characters for single-word names
    }
    
    public void archiveBook() {
        int selectedRow = library_table.getSelectedRow(); // Get selected row

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a book to archive.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int bookId = (int) library_table.getValueAt(selectedRow, 0); // Get book ID from column 0

        // Check if the book is currently borrowed
        String availabilityQuery = "SELECT Available FROM books WHERE Book_ID = ?";
        try (PreparedStatement availabilityStmt = conn.prepareStatement(availabilityQuery)) {
            availabilityStmt.setInt(1, bookId);
            ResultSet rs = availabilityStmt.executeQuery();

            if (rs.next()) {
                boolean isAvailable = rs.getBoolean("Available");
                if (!isAvailable) {
                    JOptionPane.showMessageDialog(null, "This book is currently borrowed and cannot be archived.", "Cannot Archive", JOptionPane.WARNING_MESSAGE);
                    return; // Exit the method if the book is borrowed
                }
            } else {
                JOptionPane.showMessageDialog(null, "Book not found in the database.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit if the book is not found
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error while checking availability: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the book is already archived
        String checkQuery = "SELECT is_archived FROM books WHERE Book_ID = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isArchived = rs.getBoolean("is_archived");
                if (isArchived) {
                    JOptionPane.showMessageDialog(null, "This book is already archived.", "Already Archived", JOptionPane.INFORMATION_MESSAGE);
                    return; // Exit the method if the book is already archived
                }
            } else {
                JOptionPane.showMessageDialog(null, "Book not found in the database.", "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit if the book is not found
            }

            // Confirm archiving the book
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to archive this book?", "Confirm Archiving", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String query = "UPDATE books SET is_archived = TRUE WHERE Book_ID = ?"; // Update query to archive the book

                try (PreparedStatement stmt = conn.prepareStatement(query)) { // try-with-resources for auto-closing
                    stmt.setInt(1, bookId);

                    int rowsUpdated = stmt.executeUpdate();

                    if (rowsUpdated > 0) {
                        ((DefaultTableModel) library_table.getModel()).removeRow(selectedRow); // Remove row from table
                        JOptionPane.showMessageDialog(null, "Book archived successfully!");

                        // Optionally, refresh the table to reflect the changes
                        loadBooks();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error archiving book. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database error while archiving: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error while checking status: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void unarchiveBook() {
        int selectedRow = library_table.getSelectedRow(); // Get selected row

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a book to unarchive.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int bookId = (int) library_table.getValueAt(selectedRow, 0); // Get book ID from column 0

        // Check if the book is already active (not archived)
        String checkQuery = "SELECT is_archived FROM books WHERE Book_ID = ?";
        try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
            checkStmt.setInt(1, bookId);
            ResultSet rs = checkStmt.executeQuery();

            if (rs.next()) {
                boolean isArchived = rs.getBoolean("is_archived");
                if (!isArchived) {
                    JOptionPane.showMessageDialog(null, "This book is already restored (not archived).", "Already Restored", JOptionPane.INFORMATION_MESSAGE);
                    return; // Exit the method if the book is already active
                }
            }

            // Confirm unarchiving the book
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to unarchive this book?", "Confirm Unarchiving", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String query = "UPDATE books SET is_archived = FALSE WHERE Book_ID = ?"; // Update query to unarchive the book

                try (PreparedStatement stmt = conn.prepareStatement(query)) { // try-with-resources for auto-closing
                    stmt.setInt(1, bookId);

                    int rowsUpdated = stmt.executeUpdate();

                    if (rowsUpdated > 0) {
                        // Optionally, refresh the table to reflect the changes
                        loadBooks();
                        JOptionPane.showMessageDialog(null, "Book unarchived successfully!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error unarchiving book.");
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Database error: " + ex.getMessage());
        }
    }
    
    private void addPlaceholderStyle(JTextField textField) {
        Font font = textField.getFont();
        font = font.deriveFont(Font.ITALIC);
        textField.setFont(font);
        textField.setForeground(Color.gray);
    }
    
    private void removePlaceholderStyle(JTextField textField) {
        Font font = textField.getFont();
        font = font.deriveFont(Font.PLAIN|Font.BOLD);
        textField.setFont(font);
        textField.setForeground(Color.white);
    }
    
    private void setColumnWidths() {
        // Set the preferred width for each column
        library_table.getColumnModel().getColumn(0).setPreferredWidth(50); // Set width for the first column
        library_table.getColumnModel().getColumn(1).setPreferredWidth(300); // Set width for the second column
        library_table.getColumnModel().getColumn(2).setPreferredWidth(150); // Set width for the third column
        library_table.getColumnModel().getColumn(3).setPreferredWidth(100); // Set width for the third column
        // Add more columns as needed
    }
    
    private void tableRowSelected(javax.swing.event.ListSelectionEvent evt) {
    if (!evt.getValueIsAdjusting() && library_table.getSelectedRow() != -1) {
        // Get the selected row index
        int selectedRow = library_table.getSelectedRow();

        // Retrieve value from the desired column (e.g., Column 1)
        String selectedTitle = library_table.getValueAt(selectedRow, 1).toString();
        String selectedAuthor = library_table.getValueAt(selectedRow, 2).toString(); // Change '1' to target the correct column

        // Display the selected value in the JTextField
        Font font = title.getFont();
        font = font.deriveFont(Font.PLAIN|Font.BOLD);
        title.setText(selectedTitle);
        title.setFont(font);
        title.setForeground(Color.white);
        author.setText(selectedAuthor);
        author.setFont(font);
        author.setForeground(Color.white);
    }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LMS_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LMS_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LMS_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LMS_admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LMS_admin().setVisible(true);
            }
        });
    }
    
    class CustomHeaderRenderer extends JLabel implements TableCellRenderer {
        private final Color headerBackgroundColor = hexToRgb("#663300");
        private final Color headerForegroundColor = hexToRgb("#FFFFFF");
        
        public CustomHeaderRenderer() {
            setFont(new Font("Arial", Font.BOLD, 12));
            setOpaque(true);
            setHorizontalAlignment(SwingConstants.LEFT); // Align text to the left
            setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0)); // Add padding (top, left, bottom, right)
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText(value.toString());
            setBackground(headerBackgroundColor);
            setForeground(headerForegroundColor);
            return this;
        }
        
        @Override
        public Dimension getPreferredSize() {

            // Set a custom height for the header
            return new Dimension(super.getPreferredSize().width, 40); // Set height to 40 pixels
        }
    }
    
    public static Color hexToRgb(String colorStr) {
        return new Color(
            Integer.valueOf(colorStr.substring(1, 3), 16),
            Integer.valueOf(colorStr.substring(3, 5), 16),
            Integer.valueOf(colorStr.substring(5, 7), 16)
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel addBooks_label;
    public javax.swing.JLabel addBooks_label_shadow;
    private javax.swing.JButton add_book;
    private javax.swing.JButton archive_book;
    private javax.swing.JTextField author;
    public javax.swing.JLabel books_label;
    public javax.swing.JLabel books_label_shadow;
    private javax.swing.JButton borrow_book;
    private javax.swing.JButton close;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable library_table;
    private javax.swing.JButton logout;
    private javax.swing.JButton refresh_table;
    private javax.swing.JButton restore_book;
    private javax.swing.JButton return_book;
    private javax.swing.JButton showArchived;
    private javax.swing.JTextField title;
    // End of variables declaration//GEN-END:variables
}
